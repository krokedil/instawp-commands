name: Create InstaWP Site

on:
  workflow_dispatch:
    inputs:
      site_name:
        description: 'Site name (Leave blank for surprise)'
        required: false
        default: ''
      is_reserved:
        type: boolean
        description: 'Reserve site?'
        required: true
        default: false
      expiry_hours:
        description: 'Expiry hours if not reserved'
        required: false
        default: '1'
      wp_version:
        description: 'WP version (Leave blank for default)'
        required: false
        default: ''
      php_version:
        description: 'PHP version (Leave blank for default)'
        required: false
        default: ''

jobs:
  create-instawp-site:
    runs-on: ubuntu-latest
    steps:
      - name: Create a new InstaWP site
        env:
          INSTAWP_API_TOKEN: ${{ secrets.INSTAWP_API_TOKEN }}
        run: |
          # Parse workflow inputs
          SITE_NAME="${{ github.event.inputs.site_name }}"
          EXPIRY_HOURS="${{ github.event.inputs.expiry_hours }}"
          IS_RESERVED_INPUT="${{ github.event.inputs.is_reserved }}"
          # Build JSON payload
          JSON_PAYLOAD='{
            "configuration_id": 5141,
            "team_id": 4875,
            "is_reserved": '"$IS_RESERVED_INPUT"',
            "expiry_hours": '"$EXPIRY_HOURS"'
          '
          if [ -n "$SITE_NAME" ]; then
            JSON_PAYLOAD+=" ,\"site_name\": \"$SITE_NAME\""
          fi
          if [ -n "${{ github.event.inputs.wp_version }}" ]; then
            JSON_PAYLOAD+=" ,\"wp_version\": \"${{ github.event.inputs.wp_version }}\""
          fi
          if [ -n "${{ github.event.inputs.php_version }}" ]; then
            JSON_PAYLOAD+=" ,\"php_version\": \"${{ github.event.inputs.php_version }}\""
          fi
          JSON_PAYLOAD+='}'
          echo "Payload: $JSON_PAYLOAD"
          curl -X POST \
            -H "Authorization: Bearer $INSTAWP_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            https://app.instawp.io/api/v2/sites > instawp-site-response.json
          echo "Response from InstaWP:"
          cat instawp-site-response.json

      - name: Extract task_id
        id: extract_task
        run: |
          TASK_ID=$(jq -r '.data.task_id' instawp-site-response.json)
          echo "Task ID: $TASK_ID"
          echo "task_id=$TASK_ID" >> $GITHUB_OUTPUT

      - name: Wait for site to be ready and extract site_id
        id: wait_for_site
        env:
          INSTAWP_API_TOKEN: ${{ secrets.INSTAWP_API_TOKEN }}
        run: |
          TASK_ID="${{ steps.extract_task.outputs.task_id }}"
          for i in {1..30}; do
            echo "Checking site status (attempt $i)..."
            curl -s -X GET \
              -H "Authorization: Bearer $INSTAWP_API_TOKEN" \
              -H "Accept: application/json" \
              https://app.instawp.io/api/v2/tasks/$TASK_ID/status > instawp-site-task-response.json
            echo "--- Response from InstaWP (task status) ---"
            cat instawp-site-task-response.json
            echo "------------------------------------------"
            TASK_STATUS=$(jq -r '.data.status' instawp-site-task-response.json)
            SITE_ID=$(jq -r '.data.resource_id' instawp-site-task-response.json)
            echo "Task status: $TASK_STATUS, site_id: $SITE_ID"
            if [ "$TASK_STATUS" = "completed" ] && [ -n "$SITE_ID" ] && [ "$SITE_ID" != "null" ]; then
              echo "Site is ready!"
              echo "site_id=$SITE_ID" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 10
          done
          echo "Timed out waiting for site to be ready." >&2
          exit 1

      - name: Extract site_id
        id: extract_site_id
        run: |
          SITE_ID="${{ steps.wait_for_site.outputs.site_id }}"
          echo "Site ID: $SITE_ID"
          echo "site_id=$SITE_ID" >> $GITHUB_OUTPUT

      - name: Run helper-install-wc-dev-version command
        env:
          INSTAWP_API_TOKEN: ${{ secrets.INSTAWP_API_TOKEN }}
        run: |
          SITE_ID="${{ steps.extract_site_id.outputs.site_id }}"
          curl -X POST \
            -H "Authorization: Bearer $INSTAWP_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -d '{
              "command_id": 2336
            }' \
            https://app.instawp.io/api/v2/sites/$SITE_ID/execute-command > instawp-command1-response.json
          echo "Command run response (helper-install-wc-dev-version):"
          cat instawp-command1-response.json

      - name: Run helper-wc-blueprint-import command
        env:
          INSTAWP_API_TOKEN: ${{ secrets.INSTAWP_API_TOKEN }}
        run: |
          SITE_ID="${{ steps.extract_site_id.outputs.site_id }}"
          curl -X POST \
            -H "Authorization: Bearer $INSTAWP_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -d '{
              "command_id": 2334,
              "commandArguments": [
                { "wc_blueprint_json_public_url": "https://raw.githubusercontent.com/krokedil/instawp-commands/refs/heads/main/assets/wc-blueprints/wc-blueprint-default.json" }
              ]
            }' \
            https://app.instawp.io/api/v2/sites/$SITE_ID/execute-command > instawp-command2-response.json
          echo "Command run response (helper-wc-blueprint-import):"
          cat instawp-command2-response.json

      - name: Annotate site creation summary
        env:
          INSTAWP_API_TOKEN: ${{ secrets.INSTAWP_API_TOKEN }}
        run: |
          SITE_ID="${{ steps.extract_site_id.outputs.site_id }}"
          # Fetch site details to get the site URL (url field)
          SITE_DETAILS=$(curl -s -X GET \
            -H "Authorization: Bearer $INSTAWP_API_TOKEN" \
            -H "Accept: application/json" \
            https://app.instawp.io/api/v2/sites/$SITE_ID)
          echo "--- Response from InstaWP (site details) ---"
          echo "$SITE_DETAILS"
          echo "---------------------------------------------"
          SITE_URL=$(echo "$SITE_DETAILS" | jq -r '.data.url')
          if [ -z "$SITE_URL" ] || [ "$SITE_URL" = "null" ]; then
            SITE_URL="(url not available)"
          fi
          echo "::notice title=InstaWP Site Created::Created site $SITE_URL, find magic login and details at https://app.instawp.io/sites/$SITE_ID/staging-dashboard?tab=all"